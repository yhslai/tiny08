// Calculate 1234567890 - 9876543210
// The first operand is in 0000-0007, the second operand is in 0008-0010
// the result will be stored in A000-A007
// The carrying number is in 1000

main:
	LoadI R15, #90
	Save  [0x0000], R15
	LoadI R15, #78
	Save  [0x0001], R15
	LoadI R15, #56
	Save  [0x0002], R15
	LoadI R15, #34
	Save  [0x0003], R15
	LoadI R15, #12
	Save  [0x0004], R15

	LoadI R15, #10
	Save  [0x0008], R15
	LoadI R15, #32
	Save  [0x0009], R15
	LoadI R15, #54
	Save  [0x000A], R15
	LoadI R15, #76
	Save  [0x000B], R15
	LoadI R15, #98
	Save  [0x000C], R15

	LoadI R15, #0
	Save  [0x1000], R15		// Clear the carrying number

	LoadI R14, #0 			// Loop Initialization

loop:
	LoadI R15, #6
	Equal R14, R15			// Loop Condition
	JmpC  process-sign

	LoadI R11, #0x0000
	Add   R11, R14
	LoadR R0, [R11]
	LoadI R11, #0x0008
	Add   R11, R14
	LoadR R1, [R11]
	Load  R2, [0x1000]
	Add   R1, R2

	LoadI R15, #0
	Save  [0x1000], R15		// Clear carry

	Less  R0, R1 			// Need to carry
	JmpC  carry

carry-end:
	Sub   R0, R1
	LoadI R11, #0xA000
	Add   R11, R14
	SaveR [R11], R0

	LoadI R15, #1
	Add   R14, R15			// Loop incrementation
	Jmp   loop

carry:
	LoadI R15, #100
	Add   R0, R15			// Borrow 100 from higher digit
	LoadI R15, #1
	Save  [0x1000], R15
	Jmp   carry-end

process-sign:
	Load  R2, [0x1000]
	LoadI R11, #0
	Equal R11, R2
	JmpC  output 			// If no pending carry, just output

	LoadI R15, #1 			// Set sign to negative
	Save  [0xA006], R15

	LoadI R2, #1
	LoadI R14, #0 			// Loop Initialization

process-sign-loop:
	LoadI R15, #6
	Equal R14, R15			// Loop Condition
	JmpC  output

	LoadI R11, #0xA000
	Add   R11, R14
	LoadR R0, [R11]
	LoadI R1, #99
	Add   R1, R2
	Sub   R1, R0
	SaveR [R11], R1

	LoadI R15, #1
	Add   R14, R15

	LoadI R2, #0
	LoadI R15, #100
	Less  R1, R15
	JmpC  process-sign-loop
	LoadI R2, #1

output:
%printm [0xA000]
%printm [0xA001]
%printm [0xA002]
%printm [0xA003]
%printm [0xA004]
%printm [0xA005]
%printm [0xA006]
%printm [0xA007]
	Exit
