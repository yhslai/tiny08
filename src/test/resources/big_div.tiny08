// Calculate -473763307877 / 809239
// The first operand is in 0000-0007, the second operand is in 0008-000F
// the result will be stored in A000-A007
// The temporary answer is in 1000-1007, temporary multiplication is in 1008-100F

main:
	LoadI R15, #77
	Save  [0x0000], R15
	LoadI R15, #78
	Save  [0x0001], R15
	LoadI R15, #30
	Save  [0x0002], R15
	LoadI R15, #63
	Save  [0x0003], R15
	LoadI R15, #37
	Save  [0x0004], R15
	LoadI R15, #47
	Save  [0x0005], R15
	LoadI R15, #1
	Save  [0x0006], R15

	LoadI R15, #39
	Save  [0x0008], R15
	LoadI R15, #92
	Save  [0x0009], R15
	LoadI R15, #80
	Save  [0x000A], R15

	LoadI R15, #0
	Save  [0x1000], R15 		// clear carry

	LoadI R11, #5				// loop1 initialization

loop1:
	LoadI R15, #0
	Less  R11, R15
	JmpC  loop1-end

	LoadI R12, #1 				// loop2 initialization

	loop2:
		LoadI R15, #100
		Equal R12, R15
		JmpC  loop1-inc

		LoadI R10, #0x1000
		Add   R10, R11
		SaveR [R10], R12		// Assign estimated temporary value

		LoadI R15, #0
		Save  [0x1008], R15
		Save  [0x1009], R15
		Save  [0x100A], R15
		Save  [0x100B], R15
		Save  [0x100C], R15
		Save  [0x100D], R15
		LoadI R13, #0 			// mul-loop1 initialization

		mul-loop1:
			LoadI R15, #6
			Equal R13, R15
			JmpC  process-carry

			LoadI R14, #0 		// mul-loop2 initialization

			mul-loop2:
				LoadI R15, #6
				Equal R14, R15
				JmpC  mul-loop1-inc

				LoadI R10, #0x0008
				Add   R10, R13
				LoadR R0, [R10]
				LoadI R10, #0x1000
				Add   R10, R14
				LoadR R1, [R10]
				Mul   R0, R1

				// carry
				LoadI R10, #100
				Move  R1, R0
				Div   R1, R10
				Move  R2, R0
				Mod   R2, R10

				LoadI R10, #0x1008
				Add   R10, R13
				Add	  R10, R14
				LoadI R15, #0x100D
				Less  R15, R10
				JmpNC non-overflow-lower
				LoadI R15, #0
				Less  R15, R2
				JmpNC non-overflow-lower

				Jmp   exceed

			non-overflow-lower:
				LoadI R15, #0x100C
				Less  R15, R10
				JmpNC non-overflow
				LoadI R15, #0
				Less  R15, R1
				JmpNC non-overflow

				Jmp   exceed

			non-overflow:
				LoadR R0, [R10]
				Add   R0, R2
				SaveR [R10], R0

				LoadI R15, #1
				Add	  R10, R15
				LoadR R0, [R10]
				Add   R0, R1
				SaveR [R10], R0

				LoadI R15, #1
				Add   R14, R15			// mul-loop2 incrementation
				Jmp   mul-loop2


		mul-loop1-inc:
			LoadI R15, #1
			Add	  R13, R15				// mul-loop1 incrementation
			Jmp   mul-loop1

		process-carry:
			LoadI R14, #0 				// process-carry-loop initialization

		process-carry-loop:
			LoadI R15, #6
			Equal R14, R15
			JmpC  compare				// process-carry-loop condition

			LoadI R10, #0x1008
			Add   R10, R14
			LoadR R0, [R10]
			LoadI R10, #100
			Move  R1, R0
			Div   R1, R10
			Move  R2, R0
			Mod   R2, R10

			LoadI R10, #0x1008
			Add   R10, R14
			SaveR [R10], R2
			LoadI R15, #1
			Add   R10, R15
			LoadR R0, [R10]
			Add   R0, R1
			SaveR [R10], R0

			LoadI R15, #1
			Add   R14, R15				// process-carry-loop incrementation
			Jmp   process-carry-loop

		compare:
			LoadI R14, #5

		compare-loop:
			LoadI R15, #0
			Less  R14, R15
			JmpC  loop2-inc

			LoadI R10, #0x1008
			Add	  R10, R14
			LoadR R0, [R10]				// temporary result
			LoadI R10, #0x0000
			Add   R10, R14
			LoadR R1, [R10]				// dividend
			Less  R1, R0
			JmpC  exceed
			Less  R0, R1
			JmpC  loop2-inc

			LoadI R15, #1
			Sub	  R14, R15				// compare-loop incrementation
			Jmp   compare-loop

	exceed:
		Move  R0, R12
		LoadI R15, #1
		Sub   R0, R15
		LoadI R10, #0x1000
		Add   R10, R11
		SaveR [R10], R0
		Jmp   loop1-inc

	loop2-inc:
		LoadI R15, #1
		Add   R12, R15
		Jmp loop2

loop1-inc:
	LoadI R15, #1
	Sub   R11, R15
	Jmp   loop1

loop1-end:

assign-result:
	LoadI R14, #0
assign-result-loop:
	LoadI R15, #6
	Equal R14, R15
	JmpC  assign-result-loop-end

	LoadI R11, #0x1000
	Add   R11, R14
	LoadR R0, [R11]
	LoadI R11, #0xA000
	Add   R11, R14
	SaveR [R11], R0

	LoadI R15, #1
	Add   R14, R15						// assign-result-loop incrementation
	Jmp   assign-result-loop

assign-result-loop-end:
div-sign:
	Load  R0, [0x0006]
	Load  R1, [0x000E]
	Xor   R0, R1
	Save  [0xA006], R0

output:
%printm [0xA000]
%printm [0xA001]
%printm [0xA002]
%printm [0xA003]
%printm [0xA004]
%printm [0xA005]
%printm [0xA006]
%printm [0xA007]
	Exit


