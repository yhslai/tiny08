// Calculate 1234567890 + 9876543210
// The first operand is in C000-C005, the second operand is in C006-C00B
// the result will be stored in C00C-C011
// The carrying number is in D000

main:
	LoadI R15, #90
	Save  [0xC000], R15
	LoadI R15, #78
	Save  [0xC001], R15
	LoadI R15, #56
	Save  [0xC002], R15
	LoadI R15, #34
	Save  [0xC003], R15
	LoadI R15, #12
	Save  [0xC004], R15

	LoadI R15, #10
	Save  [0xC006], R15
	LoadI R15, #32
	Save  [0xC007], R15
	LoadI R15, #54
	Save  [0xC008], R15
	LoadI R15, #76
	Save  [0xC009], R15
	LoadI R15, #98
	Save  [0xC00A], R15

	LoadI R15, #0
	Save  [0xD000], R15		// Clear the carrying number


	LoadI R14, #0 			// Loop initialization

loop:
	LoadI R15, #6
	Equal R14, R15			// Loop condition
	JmpC  output

	LoadI R11, #0xC000
	Add   R11, R14
	LoadR R0, [R11]
	LoadI R11, #0xC006
	Add   R11, R14
	LoadR R1, [R11]
	Load  R2, [0xD000]
	Add   R0, R1
	Add   R0, R2
	LoadI R15, #99
	Less  R15, R0
	JmpC  carry
	JmpNC no-carry

carry-end:
	LoadI R11, #0xC00C
	Add   R11, R14
	SaveR [R11], R0

	LoadI R15, #1
	Add   R14, R15			// Loop incrementation
	Jmp   loop

carry:
	LoadI R15, #1
	Save  [0xD000], R15
	Jmp   carry-end

no-carry:
	LoadI R15, #0
	Save  [0xD000], R15
	Jmp   carry-end

output:
%printm [0xC011]
%printm [0xC010]
%printm [0xC00F]
%printm [0xC00E]
%printm [0xC00D]
%printm [0xC00C]
	Exit
