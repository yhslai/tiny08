// The first operand is in 0000-0007, the second operand is in 0008-000F
// the result will be stored in A000-A007
// The temporary answer is in 1000-100B, temporary multiplication is in 1010-101B

div-begin:
	LoadI R15, #0
	Save  [0x1000], R15
	Save  [0x1001], R15
	Save  [0x1002], R15
	Save  [0x1003], R15
	Save  [0x1004], R15
	Save  [0x1005], R15
	Save  [0x1006], R15
	Save  [0x1007], R15
	Save  [0x1008], R15
	Save  [0x1009], R15
	Save  [0x100A], R15
	Save  [0x100B], R15

	LoadI R11, #11				// loop1 initialization

div-loop1:
	LoadI R15, #0
	Less  R11, R15
	JmpC  div-loop1-end

	LoadI R12, #1 				// loop2 initialization

	div-loop2:
		LoadI R15, #100
		Equal R12, R15
		JmpC  div-loop1-inc

		LoadI R10, #0x1000
		Add   R10, R11
		SaveR [R10], R12		// Assign estimated temporary value

		LoadI R15, #0
		Save  [0x1010], R15
		Save  [0x1011], R15
		Save  [0x1012], R15
		Save  [0x1013], R15
		Save  [0x1014], R15
		Save  [0x1015], R15
		Save  [0x1016], R15
		Save  [0x1017], R15
		Save  [0x1018], R15
		Save  [0x1019], R15
		Save  [0x101A], R15
		Save  [0x101B], R15

		LoadI R13, #0 			// mul-loop1 initialization

		div-mul-loop1:
			LoadI R15, #6
			Equal R13, R15
			JmpC  div-process-carry

			LoadI R14, #0 		// mul-loop2 initialization

			div-mul-loop2:
				LoadI R15, #12
				Equal R14, R15
				JmpC  div-mul-loop1-inc

				LoadI R10, #0x0008
				Add   R10, R13
				LoadR R0, [R10]
				LoadI R10, #0x1000
				Add   R10, R14
				LoadR R1, [R10]
				Mul   R0, R1

				// carry
				LoadI R10, #100
				Move  R1, R0
				Div   R1, R10
				Move  R2, R0
				Mod   R2, R10

				LoadI R10, #0x1010
				Add   R10, R13
				Add	  R10, R14
				LoadI R15, #0x101B
				Less  R15, R10
				JmpNC div-non-overflow-lower
				LoadI R15, #0
				Less  R15, R2
				JmpNC div-non-overflow-lower

				Jmp   div-exceed

			div-non-overflow-lower:
				LoadI R15, #0x101A
				Less  R15, R10
				JmpNC div-non-overflow
				LoadI R15, #0
				Less  R15, R1
				JmpNC div-non-overflow

				Jmp   div-exceed

			div-non-overflow:
				LoadR R0, [R10]
				Add   R0, R2
				SaveR [R10], R0

				LoadI R15, #1
				Add	  R10, R15
				LoadR R0, [R10]
				Add   R0, R1
				SaveR [R10], R0

				LoadI R15, #1
				Add   R14, R15			// mul-loop2 incrementation
				Jmp   div-mul-loop2


		div-mul-loop1-inc:
			LoadI R15, #1
			Add	  R13, R15				// mul-loop1 incrementation
			Jmp   div-mul-loop1

		div-process-carry:
			LoadI R14, #0 				// process-carry-loop initialization

		div-process-carry-loop:
			LoadI R15, #12
			Equal R14, R15
			JmpC  div-compare			// process-carry-loop condition

			LoadI R10, #0x1010
			Add   R10, R14
			LoadR R0, [R10]
			LoadI R10, #100
			Move  R1, R0
			Div   R1, R10
			Move  R2, R0
			Mod   R2, R10

			LoadI R10, #0x1010
			Add   R10, R14
			SaveR [R10], R2
			LoadI R15, #1
			Add   R10, R15
			LoadR R0, [R10]
			Add   R0, R1
			SaveR [R10], R0

			LoadI R15, #1
			Add   R14, R15				// process-carry-loop incrementation
			Jmp   div-process-carry-loop

		div-compare:
			LoadI R14, #5

		div-compare-loop:
			LoadI R15, #0
			Less  R14, R15
			JmpC  div-compare2

			LoadI R10, #0x1016
			Add	  R10, R14
			LoadR R0, [R10]				// temporary result
			LoadI R10, #0x0000
			Add   R10, R14
			LoadR R1, [R10]				// dividend
			Less  R1, R0
			JmpC  div-exceed
			Less  R0, R1
			JmpC  div-loop2-inc

			LoadI R15, #1
			Sub	  R14, R15				// compare-loop incrementation
			Jmp   div-compare-loop

		div-compare2:
			LoadI R14, #5

		div-compare2-loop:
			LoadI R15, #0
			Less  R14, R15
			JmpC  div-loop2-inc

			LoadI R10, #0x1010
			Add   R10, R14
			LoadR R0, [R10]
			LoadI R1, #0
			Less  R1, R0
			JmpC  div-exceed

			LoadI R15, #1
			Sub   R14, R15
			Jmp   div-compare2-loop

	div-exceed:
		Move  R0, R12
		LoadI R15, #1
		Sub   R0, R15
		LoadI R10, #0x1000
		Add   R10, R11
		SaveR [R10], R0
		Jmp   div-loop1-inc

	div-loop2-inc:
		LoadI R15, #1
		Add   R12, R15
		Jmp   div-loop2

div-loop1-inc:
	LoadI R15, #1
	Sub   R11, R15
	Jmp   div-loop1

div-loop1-end:

div-div-sign:
	Load  R0, [0x0006]
	Load  R1, [0x000E]
	Xor   R0, R1
	Save  [0xA006], R0

div-div-float:
	Load  R0, [0x0007]
	Load  R1, [0x000F]
	Sub   R0, R1
	LoadI R15, #12
	Add   R0, R15
	Save  [0xA007], R0

div-check-repoint:
	LoadI R14, #11

div-find-highest-loop:
	LoadI R15, #5
	Equal R14, R15
	JmpC  div-repoint

	LoadI R10, #0x1000
	Add   R10, R14
	LoadR R0, [R10]
	LoadI R15, #0
	Equal R0, R15
	JmpNC div-repoint

	LoadI R15, #1
	Sub   R14, R15
	Jmp   div-find-highest-loop

div-repoint:
	LoadI R13, #5

div-repoint-loop:
	LoadI R15, #0
	Less  R13, R15
	JmpC  div-repoint-end

	LoadI R10, #0x1000
	Add   R10, R14
	LoadR R0, [R10]
	LoadI R10, #0xA000
	Add   R10, R13
	SaveR [R10], R0

	LoadI R15, #1
	Sub   R14, R15
	Sub   R13, R15
	Jmp   div-repoint-loop

div-repoint-end:
	Load  R0, [0xA007]
	Move  R1, R14
	LoadI R15, #1
	Add   R1, R15
	LoadI R15, #2
	Mul   R1, R15
	Sub   R0, R1
	Save  [0xA007], R0

	LoadI R15, #0
	Less  R0, R15
	JmpNC div-end

div-error:
	LoadI R15, #0xFFFF
	Save  [0xA006], R15

div-end:


