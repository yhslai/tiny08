// The first operand is in 0000-0007
// the result will be stored in A000-A007
// The temporary answer is in 1000-1007, temporary multiplication is in 1008-100F

sqrt-begin:
	LoadI R15, #0
	Save  [0x1000], R15 		// clear carry

	LoadI R11, #5				// loop1 initialization

sqrt-loop1:
	LoadI R15, #0
	Less  R11, R15
	JmpC  sqrt-loop1-end

	LoadI R12, #1 				// loop2 initialization

	sqrt-loop2:
		LoadI R15, #100
		Equal R12, R15
		JmpC  sqrt-loop1-inc

		LoadI R10, #0x1000
		Add   R10, R11
		SaveR [R10], R12		// Assign estimated temporary value

		LoadI R15, #0
		Save  [0x1008], R15
		Save  [0x1009], R15
		Save  [0x100A], R15
		Save  [0x100B], R15
		Save  [0x100C], R15
		Save  [0x100D], R15
		LoadI R13, #0 			// mul-loop1 initialization

		sqrt-mul-loop1:
			LoadI R15, #6
			Equal R13, R15
			JmpC  sqrt-process-carry

			LoadI R14, #0 		// mul-loop2 initialization

			sqrt-mul-loop2:
				LoadI R15, #6
				Equal R14, R15
				JmpC  sqrt-mul-loop1-inc

				LoadI R10, #0x1000
				Add   R10, R13
				LoadR R0, [R10]
				LoadI R10, #0x1000
				Add   R10, R14
				LoadR R1, [R10]
				Mul   R0, R1

				// carry
				LoadI R10, #100
				Move  R1, R0
				Div   R1, R10
				Move  R2, R0
				Mod   R2, R10

				LoadI R10, #0x1008
				Add   R10, R13
				Add	  R10, R14

				LoadI R15, #0x100D
				Less  R15, R10
				JmpNC sqrt-non-overflow-lower
				LoadI R15, #0
				Less  R15, R2
				JmpNC sqrt-non-overflow-lower

				Jmp   sqrt-exceed

			sqrt-non-overflow-lower:
				LoadI R15, #0x100C
				Less  R15, R10
				JmpNC sqrt-non-overflow
				LoadI R15, #0
				Less  R15, R1
				JmpNC sqrt-non-overflow

				Jmp   sqrt-exceed

			sqrt-non-overflow:
				LoadR R0, [R10]
				Add   R0, R2
				SaveR [R10], R0

				LoadI R15, #1
				Add	  R10, R15
				LoadR R0, [R10]
				Add   R0, R1
				SaveR [R10], R0

				LoadI R15, #1
				Add   R14, R15			// mul-loop2 incrementation
				Jmp   sqrt-mul-loop2


		sqrt-mul-loop1-inc:
			LoadI R15, #1
			Add	  R13, R15				// mul-loop1 incrementation
			Jmp   sqrt-mul-loop1

		sqrt-process-carry:
			LoadI R14, #0 				// process-carry-loop initialization

		sqrt-process-carry-loop:
			LoadI R15, #6
			Equal R14, R15
			JmpC  sqrt-compare				// process-carry-loop condition

			LoadI R10, #0x1008
			Add   R10, R14
			LoadR R0, [R10]
			LoadI R10, #100
			Move  R1, R0
			Div   R1, R10
			Move  R2, R0
			Mod   R2, R10

			LoadI R10, #0x1008
			Add   R10, R14
			SaveR [R10], R2
			LoadI R15, #1
			Add   R10, R15
			LoadR R0, [R10]
			Add   R0, R1
			SaveR [R10], R0

			LoadI R15, #1
			Add   R14, R15				// process-carry-loop incrementation
			Jmp   sqrt-process-carry-loop

		sqrt-compare:
			LoadI R14, #5

		sqrt-compare-loop:
			LoadI R15, #0
			Less  R14, R15
			JmpC  sqrt-loop2-inc

			LoadI R10, #0x1008
			Add	  R10, R14
			LoadR R0, [R10]				// temporary result
			LoadI R10, #0x0000
			Add   R10, R14
			LoadR R1, [R10]				// dividend
			Less  R1, R0
			JmpC  sqrt-exceed
			Less  R0, R1
			JmpC  sqrt-loop2-inc

			LoadI R15, #1
			Sub	  R14, R15				// compare-loop incrementation
			Jmp   sqrt-compare-loop

	sqrt-exceed:
		Move  R0, R12
		LoadI R15, #1
		Sub   R0, R15
		LoadI R10, #0x1000
		Add   R10, R11
		SaveR [R10], R0
		Jmp   sqrt-loop1-inc

	sqrt-loop2-inc:
		LoadI R15, #1
		Add   R12, R15
		Jmp sqrt-loop2

sqrt-loop1-inc:
	LoadI R15, #1
	Sub   R11, R15
	Jmp   sqrt-loop1

sqrt-loop1-end:

sqrt-assign-result:
	LoadI R14, #0
sqrt-assign-result-loop:
	LoadI R15, #6
	Equal R14, R15
	JmpC  sqrt-assign-result-loop-end

	LoadI R11, #0x1000
	Add   R11, R14
	LoadR R0, [R11]
	LoadI R11, #0xA000
	Add   R11, R14
	SaveR [R11], R0

	LoadI R15, #1
	Add   R14, R15						// assign-result-loop incrementation
	Jmp   sqrt-assign-result-loop

sqrt-assign-result-loop-end:

sqrt-end:

